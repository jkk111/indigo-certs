// Code generated by go-bindata.
// sources:
// resources/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x4d\x8f\xd3\x30\x10\xbd\x57\xea\x7f\x18\x22\x71\xa3\xeb\x16\x09\x0e\xc1\xe9\x65\x41\xe2\xc6\x4a\xed\x85\xa3\x6b\x4f\x9a\x41\xfe\x88\xec\x69\x77\x23\xb4\xff\x1d\xd5\x49\x5c\x95\x45\xa2\xa7\x76\xde\x73\x9e\xe7\xbd\x97\xc8\x77\x5f\x7f\x3c\xee\x7f\x3e\x7d\x83\x8e\x9d\xdd\x2e\x17\xb2\xfc\xa2\x32\xdb\xe5\x02\x40\x32\xb1\xc5\xed\x0e\x6d\x0b\x3b\x8c\x67\xd2\x08\x8f\x18\x39\x49\x31\x32\xf9\x50\xe2\xc1\x22\xf0\xd0\x63\x53\x31\xbe\xb0\xd0\x29\x55\x99\x02\x38\x04\x33\x7c\xc8\x17\xc0\xef\x11\x01\x70\x2a\x1e\xc9\xd7\xb0\xfe\x32\x23\xcf\x64\xb8\xab\x61\xb3\x5e\xbf\x2f\x58\x87\x74\xec\xf8\x06\x7c\x5d\x2e\xc6\x3f\x0f\x3a\x78\x46\xcf\x57\xcd\x3b\x15\x00\x0c\xa5\xde\xaa\xa1\x86\xd6\xe2\x4b\x41\x2f\xc3\xca\x50\x44\xcd\x14\x7c\x0d\x3a\xd8\x93\xf3\x85\xfe\x75\x4a\x4c\xed\xb0\x9a\xae\xad\x41\xa3\x67\x8c\x85\x57\x96\x8e\x7e\x45\x8c\x2e\xfd\xc5\x95\x95\xdb\x10\xdd\x9b\x75\x3f\xbf\xb5\x46\xbe\x3f\xfd\xc7\x57\xc9\xef\xe1\xe3\x27\x74\x25\xc6\xd7\x5c\x86\xc8\x6d\x5c\x5a\x14\x53\x8d\xf2\xd2\xc1\xd8\x94\xa1\x33\x68\xab\x52\x6a\xaa\xc9\xca\xdc\x93\xec\x36\xb7\x35\x7f\xdf\xef\x9f\x76\xb9\x6c\x6a\x49\x2b\xc6\x24\x45\xb7\x99\x4f\x67\x37\x2a\x87\xd5\x54\xe2\x88\x1e\xa3\x62\xac\xc0\x21\x77\xc1\x34\x55\x1f\x52\x91\x06\x90\xa3\xa9\xeb\x1b\x52\x81\x57\x0e\x9b\x0a\x9d\x22\x5b\x41\x6f\x95\xc6\x2e\x58\x83\xb1\x60\xe2\xfa\xf4\x21\x8a\x7f\x4b\xf5\x2a\xa5\xe7\x10\xcd\x2c\x77\x9d\x6f\x14\x7b\x35\xa2\xf7\x48\xa6\xd3\xc1\x51\xd9\x6f\x9a\x66\xd7\xe2\x62\x7b\x4c\x52\x18\x3a\xe7\x90\xa7\x70\xa5\xc8\x1f\xcf\x9f\x00\x00\x00\xff\xff\xc8\x15\x18\x8c\x54\x03\x00\x00")

func resourcesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesIndexHtml,
		"resources/index.html",
	)
}

func resourcesIndexHtml() (*asset, error) {
	bytes, err := resourcesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/index.html", size: 852, mode: os.FileMode(438), modTime: time.Unix(1531358805, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/index.html": resourcesIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{resourcesIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

